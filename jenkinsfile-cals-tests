def notifyBuild(String buildStatus, Exception e) {
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = """*${buildStatus}*: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nMore detail in console output at <${env.BUILD_URL}|${env.BUILD_URL}>"""
  def details = """${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\n
    Check console output at ${env.BUILD_URL} """
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
    details +="<p>Error message ${e.message}, stacktrace: ${e}</p>"
    summary +="\nError message ${e.message}, stacktrace: ${e}"
  }

  // Send notifications

  // slackSend channel: "#cals-api", baseUrl: 'https://hooks.slack.com/services/', tokenCredentialId: 'slackmessagetpt2', color: colorCode, message: summary
  // emailext(
  //    subject: subject,
  //    body: details,
  //    attachLog: true,
  //    recipientProviders: [[$class: 'DevelopersRecipientProvider']],
  //    to: "srikanth.chowdhary@osi.ca.gov"
  //  )
}

node ('preint') {
   properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')),
              [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
			  parameters([
			  string(defaultValue: '{"user":"RACFID","staffId":"34","roles":["Supervisor"],"county_code":"19","county_name":"Orange","privileges":["Statewide Read","Sealed"]}', description: '', name: 'USERNAME'),
			  string(defaultValue: 'latest', description: 'Docker hub container version', name: 'APP_VERSION'),
			  string(defaultValue: 'https://web.preint.cwds.io/cals', description: '', name: 'APP_URL')]),pipelineTriggers([])])

   def errorcode = null;
   def buildInfo = '';

 try {

   stage('Preparation') {
		  cleanWs()
		  git branch: 'development', credentialsId: '433ac100-b3c2-4519-b4d6-207c029a103b', url: 'https://github.com/ca-cwds/CALS.git'
   }
   
   stage('Build Docker'){
       
        withDockerRegistry([credentialsId: 'a1315b14-e449-464b-a80a-28d8f55143a9']) {
            sh 'cd docker/dev/app/cals-acceptance-tests/;docker-compose build --no-cache'
            // sh "docker tag calsacceptancetests_cals_acceptance_test cwds/acceptance_testing:${APP_VERSION}"
            // sh "docker push cwds/acceptance_testing:${APP_VERSION}"
        }
  }
   stage('Run tests selenium'){
      withEnv(["CAPYBARA_APP_HOST=${APP_URL}",
               "USERNAME=${USERNAME}"
               ]) {
	        sh 'cd docker/dev/app/cals-acceptance-tests/'
		sh 'pwd'
		sh 'env'
                sh 'docker-compose -f docker/dev/app/cals-acceptance-tests/docker-compose.yml up'
      }
	}
            stage ('Reports') {
                // step([$class: 'JUnitResultArchiver', testResults: '**/reports/*.xml'])
		echo 'reports stage - nothing to do'  
            }

	  } catch (Exception e)    {
	   errorcode = e
	   currentBuild.result = "FAIL"
	   notifyBuild(currentBuild.result,errorcode)
	}
	finally {
	     fingerprint 'reports/*'
		 
	     junit allowEmptyResults: true, testResults: 'reports/TEST-*.xml'
		 
	}
}
